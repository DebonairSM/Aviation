name: Deploy to Azure QA

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag to deploy (e.g., v1.0.0)'
        required: true
      confirm_deployment:
        description: 'Type "yes" to confirm deployment to QA'
        required: true

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_FILE: 'EnterpriseApiIntegration.sln'
  REGISTRY_NAME: 'aviationqa2024'
  RESOURCE_GROUP: 'rg-aviation-qa'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - name: Validate confirmation
      run: |
        if [ "${{ github.event.inputs.confirm_deployment }}" != "yes" ]; then
          echo "Deployment not confirmed. Please type 'yes' to confirm deployment to QA."
          exit 1
        fi

  deploy-to-qa:
    needs: validate
    runs-on: ubuntu-latest
    environment: qa
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.version_tag }}
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    # Build and push Docker images with version tag
    - name: Build and push Identity Service
      run: |
        docker build -f AzureMicroservicesPlatform.Identity/Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/identity:${{ github.event.inputs.version_tag }} .
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/identity:${{ github.event.inputs.version_tag }}

    - name: Build and push Aircraft Service
      run: |
        docker build -f AzureMicroservicesPlatform.Services.Aircraft/Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/aircraft:${{ github.event.inputs.version_tag }} .
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/aircraft:${{ github.event.inputs.version_tag }}

    - name: Build and push Customers Service
      run: |
        docker build -f AzureMicroservicesPlatform.Services.Customers/Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/customers:${{ github.event.inputs.version_tag }} .
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/customers:${{ github.event.inputs.version_tag }}

    - name: Build and push Subscriptions Service
      run: |
        docker build -f AzureMicroservicesPlatform.Services.Subscriptions/Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/subscriptions:${{ github.event.inputs.version_tag }} .
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/subscriptions:${{ github.event.inputs.version_tag }}

    # Deploy to Azure Web Apps
    - name: Deploy Identity Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'aviation-identity-qa'
        images: '${{ env.REGISTRY_NAME }}.azurecr.io/identity:${{ github.event.inputs.version_tag }}'

    - name: Deploy Aircraft Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'aviation-aircraft-qa'
        images: '${{ env.REGISTRY_NAME }}.azurecr.io/aircraft:${{ github.event.inputs.version_tag }}'

    - name: Deploy Customers Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'aviation-customers-qa'
        images: '${{ env.REGISTRY_NAME }}.azurecr.io/customers:${{ github.event.inputs.version_tag }}'

    - name: Deploy Subscriptions Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'aviation-subscriptions-qa'
        images: '${{ env.REGISTRY_NAME }}.azurecr.io/subscriptions:${{ github.event.inputs.version_tag }}'

    - name: Azure Logout
      run: az logout
      if: always() 